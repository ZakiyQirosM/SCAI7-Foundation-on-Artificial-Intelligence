# -*- coding: utf-8 -*-
"""01-Kelompok F-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19F07H_dULLzhxv7nXe13qsKfvTjI4gy8

Paper Money: <br>
1. Rp 100,000    
2. Rp 50,000   
3. Rp 20,000   
4. Rp 10,000   
5. Rp 5,000   
6. Rp 2,000
<br>
<br>
Coins: <br>
1. Rp 1,000  
2. Rp 500  
3. Rp 200
4. Rp 100  
*To make it easier, we assume that all Rp. 1000 denominations are coins.

There are circumstances where the bank must liquidate all customer savings in the form of money, if the customer requests it.
And imagine this is happening right now in front of you, help the bank to calculate how many denominations of money are needed.

Here is the rule:

1. Bank must prioritize the largest denominations first to be issued.
2. If there is a balance that cannot be cashed, the bank must inform it.
3. Bank must calculate how many number of Paper Money needed and Coins needed.
4. Banks can only disburse a maximum amount of 1 billion Rupiah



Make a python code that receives an integer number of customer savings from 0 - 1 Billions.
"""

def calculate_money_distribution(savings):
    # Max 1 billion
    MAX_SAVINGS = 1000000000 #konstan

    # List pecahan untuk uang kertas (descending)
    paper_money = [100000, 50000, 20000, 10000, 5000, 2000]

    # List pecahan uang koin (descending)
    coins = [1000, 500, 200, 100]

    if savings > MAX_SAVINGS:
        print(f"Maximum Saving is {MAX_SAVINGS}")
        return
    elif savings < 0:
        print("Please input the correct number(input > 0)")
        return

    try:
        original_savings = savings
        total_paper_money = 0
        total_coins = 0

    #nyimpen jumlah tiap pecahan yang dibutuhkan, berapa nih pecahan ini dipake?
        result = {}

        # Ngehitung pecahan uang kertas
        for bill in paper_money:
            count = savings // bill
            savings %= bill
            result[f"Rp {bill}"] = count
            total_paper_money += count

        # Ngehitung pecahan uang koin
        for coin in coins:
            count = savings // coin
            savings %= coin
            result[f"Rp {coin}"] = count
            total_coins += count

        # nyetak hasilnya setiap satuan
        print("\n")
        for denomination, count in result.items():
            print(f"amount of currency {denomination}: {count}")

        # print jumlah total uang
        print(f"\nTotal Paper Money: {total_paper_money}")
        print(f"Total Coins: {total_coins}")

        # Sisa saldo yang gabisa ditarik
        if savings > 0:
            print("\n")
            print(f"Cannot be cashed out: {savings}")

    # Menangani error jika inputan selain int
    except ValueError:
        print("Error: the input should be integer!")

# Input
print("==========================")
print("|| Welcome to the Bank! ||")
print("==========================")
try:
    num = int(input("Enter an integer: "))
    print("You entered:", num)

except ValueError:
    print("Error: the input should be integer!")

# Menampilkan hasil distribusi uang
try:
    calculate_money_distribution(num)
except NameError:
    print("Error: the input should be integer!")